os: linux
dist: bionic

language: cpp

cache:
 apt: true

git:
  depth: false

# the secure below is the binstar token
# - Prerequisites :
# On Linux, install travis tools using:
# $ sudo gem install travis
# this is ruby code, check your ruby environment is up to date.
#
# - Generate the secure
# 1. create an anconda cloud token
# $ anaconda auth -n the_token_name --max-age 22896000 -c --scopes api
# token_name can be anything. Be sure you use a token_name you can easily identify
# on the anaconda cloud configuration page.
# the token is returned as something like "yh-6654-12334_111225"
# 2. encrypt the token
# You have to be in the directory where you installed the local copy of the repository
# $ cd [your_dev_dir]/pythonocc-core
# $ sudo travis encrypt BINSTAR_TOKEN="yh-6654-12334_111225"
# !!be careful about the typo BINSTAR_TOKEN with the proper case. Otherwise
# !!the $BINSTAR_TOKEN env var value will be null and the line
# !!anaconda -t $BINSTAR_TOKEN upload *.bz2 will not be run properly
# 3. after that, copy/paste the secure content just below, between double quotes.
env:
  global:
    - secure: "Bqor4TrYqeJUkjiIHjCq/e3xt/jAoU3Q5kwG/ej+QxaiT6hmkirX3Io3rHxNTbS+mYMAMTbtkkpGqYIYIYtNVx8jGYLdwOzNcuW/wzZf9VuAW/rnjx2lzuYRhHk3GOylSPUU06JHvXDmZvdMxetNBeWaE5hGuJsC9liA+stDepA="

addons:
  apt:
    packages:
      - mesa-common-dev
      - libgl1-mesa-dev
      - libglu1-mesa-dev

before_cache:
  - rm -rf $HOME/miniconda/locks $HOME/miniconda/pkgs $HOME/miniconda/var $HOME/miniconda/conda-meta/history $HOME/miniconda/envs/test-environment/conda-meta/history $HOME/miniconda/lib/python3.5/__pycache__ $HOME/miniconda/lib/python3.6/__pycache__ $HOME/miniconda/lib/python3.7/__pycache__;
  - touch $HOME/miniconda/conda-meta/history;

cache :
  apt: true
  directories:
    - $HOME/download
    - $HOME/miniconda

jobs:
  include:
# Linux
    - env: PYTHON="3.5" CONDA_PY=35 ARCH="x86_64"
    - env: PYTHON="3.6" CONDA_PY=36 ARCH="x86_64"
    - env: PYTHON="3.7" CONDA_PY=37 ARCH="x86_64"
# OSX
    - env: PYTHON="3.5" CONDA_PY=35 ARCH="x86_64"
      os: osx
      osx_image: xcode9.4
    - env: PYTHON="3.6" CONDA_PY=36 ARCH="x86_64"
      os: osx
      osx_image: xcode9.4
    - env: PYTHON="3.7" CONDA_PY=37 ARCH="x86_64"
      os: osx
      osx_image: xcode9.4
# Windows
    - env: PYTHON="3.5" CONDA_PY=35 ARCH="x86_64"
      os: windows
    - env: PYTHON="3.6" CONDA_PY=36 ARCH="x86_64"
      os: windows
    - env: PYTHON="3.7" CONDA_PY=37 ARCH="x86_64"
      os: windows

# The cache code for installing/caching on win/osx/linux
# is from https://github.com/kangwonlee/momisp
before_install:
  - if [ "$TRAVIS_OS_NAME" != "windows" ]; then
      MINICONDA_PATH=$HOME/miniconda;
      MINICONDA_SUB_PATH=$MINICONDA_PATH/bin;
    elif [ "$TRAVIS_OS_NAME" == "windows" ]; then
      MINICONDA_PATH=/c/tools/miniconda3;
      MINICONDA_SUB_PATH=$MINICONDA_PATH/Scripts;
    fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME/download/miniconda.sh;
    elif [ "$TRAVIS_OS_NAME" == "osx" ]; then
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O $HOME/download/miniconda.sh;
    fi

install:
  - if [ "$TRAVIS_OS_NAME" != "windows" ]; then
    if [ -d $MINICONDA_SUB_PATH ]; then
    echo "miniconda for posix already available";
    else
    echo "installing miniconda for posix";
    bash $HOME/download/miniconda.sh -b -u -p $MINICONDA_PATH;
    fi;
    fi
  - if [ "$TRAVIS_OS_NAME" == "windows" ]; then
    echo "checking if folder $MINICONDA_SUB_PATH exists";
    if [ -d $MINICONDA_SUB_PATH ]; then
    echo "folder $MINICONDA_SUB_PATH exists";
    echo "miniconda for Windows already installed";
    else
    echo "folder $MINICONDA_SUB_PATH does not exist";
    echo "installing miniconda for windows";
    choco install openssl.light;
    choco install miniconda3;
    fi;
    fi
  - export PATH="$MINICONDA_PATH:$MINICONDA_SUB_PATH:$PATH";
  # begin checking miniconda existance
  - echo "checking if folder $MINICONDA_SUB_PATH exists"
  - if [ -d $MINICONDA_SUB_PATH ]; then
      echo "folder $MINICONDA_SUB_PATH exists"
    else
      echo "folder $MINICONDA_SUB_PATH does not exist"
    fi
  - hash -r
  - conda config --set always_yes yes --set changeps1 no --set ssl_verify false
  - conda update -q conda
  # Useful for debugging any issues with conda
  - conda info -a
  - conda install conda-build anaconda-client
  # download/install OCE from DLR-SC channel
  - conda config --add channels https://conda.anaconda.org/dlr-sc
  - conda config --add channels https://conda.anaconda.org/conda-forge
  - conda config --add channels https://conda.anaconda.org/tpaviot
  - conda config --add channels https://conda.anaconda.org/oce
  - conda config --add channels https://conda.anaconda.org/pythonocc


script:
  - conda build ci/conda --dirty --no-remove-work-dir

# automative upload to anaconda cloud only
# if the build was triggered by a cron
# labelled as "nightly"
# else labelled as "continuous-delivery"
after_success:
  - python ci/move-conda-package.py
  - if [ "$TRAVIS_BRANCH" == "master" ]; then
      anaconda -t $BINSTAR_TOKEN upload *.bz2 -l main --force;
    else
      anaconda -t $BINSTAR_TOKEN upload *.bz2 -l cd-$TRAVIS_BRANCH --force;
    fi


branches:
  only:
    - master
    - /^review/
